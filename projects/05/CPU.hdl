// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // C-instruction format: 111 a cccccc ddd jjj

    // Decode instruction (A or C instruction)
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=aRegIn);
   
    // Load to A-Register only if A-instruction or if C-instruction and instruction[5]=1
    Mux(a=true, b=instruction[5], sel=instruction[15], out=aRegLoad);   
    ARegister(in=aRegIn, load=aRegLoad, out=aRegOut, out[0..14]=addressM);
    
    // Load to D-register only if C-instruction and instruction[4]=1
    Mux(a=false, b=instruction[4], sel=instruction[15], out=dRegLoad);   
    DRegister(in=aluOut, load=dRegLoad, out=dRegOut);

     // Write to M only if C-instruction and instruction[3]=1
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);   
    
    // Choose computation source (A or M)
    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=amRegOut);
    // Execute
    ALU(x=dRegOut, y=amRegOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluOut, zr=zr, ng=ng);

    // PC counter

    // Not positive
    Or(a=zr, b=ng, out=notPos);
    Not(in=notPos, out=pos);
    
    // Jump conditions
    And(a=pos, b=instruction[0], out=posEq);
    And(a=zr, b=instruction[1], out=zrEq);
    And(a=ng, b=instruction[2], out=ngEq);
    
    Or(a=posEq, b=zrEq, out=jump1);
    Or(a=jump1, b=ngEq, out=jump);

    Mux(a=false, b=jump, sel=instruction[15], out=loadPc);

    PC(in=aRegOut, load=loadPc, inc=true, reset=reset, out[0..14]=pc);

   
    
}